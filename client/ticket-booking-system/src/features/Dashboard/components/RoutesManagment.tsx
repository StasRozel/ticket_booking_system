import React, { useEffect, useState } from 'react';
import '../styles/css/EntitesManagement.css';
import FormUpdateRoute from './FormRoute';
import { useDashboard } from '../context/DashboardContext';
import ConfirmModal from '../../../shared/components/ConfirmModal';
import { useModal } from '../../../shared/context/ModalContext';
import { RouteType } from '../../../shared/types/RouteType';

const RoutesManagement: React.FC = () => {
    const { routes, trigger, fetchRoutes, DeleteRoute, OpenModalForm, CloseModalForm, isAddMode, isModalFormOpen } = useDashboard();
    const { modalMessage, isModalOpen, openModal, handleModalClose } = useModal();
    const [selectedRoute, setSelectedRoute] = useState<RouteType | null>(null);

    useEffect(() => {
        fetchRoutes();
    }, [trigger]);

    const handleEditRoute = (route: RouteType) => {
        setSelectedRoute(route);
        OpenModalForm(false); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    };

    return (
        <div className="routes-management">
            <h2>–†–∞–±–æ—Ç–∞ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏</h2>

            <div className="container">
                <table className="routes-management__table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞</th>
                            <th>–ú–∞—Ä—à—Ä—É—Ç</th>
                            <th>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</th>
                            <th>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</th>
                            <th>–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        {routes.map((route: RouteType) => (
                            <tr key={route.id}>
                                <td>{route.id}</td>
                                <td>{route.name}</td>
                                <td>{`${route.starting_point} ‚Üí ${route.ending_point}`}</td>
                                <td>{route.stops ? route.stops : '–ù–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–æ–∫'}</td>
                                <td>{route.distance} –∫–º</td>
                                <td>{route.price} —Ä—É–±.</td>
                                <td>
                                    <button
                                        className="routes-management__action"
                                        onClick={() => handleEditRoute(route)}
                                    >
                                        ‚úèÔ∏è
                                    </button>
                                    <button
                                        className="routes-management__action routes-management__action--delete"
                                        onClick={() => openModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É—Ç—å?', () => DeleteRoute(route.id as number))}
                                    >
                                        üóëÔ∏è
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
                <div className="routes-management__actions">
                    <button className="routes-management__button__confirm" onClick={() => OpenModalForm(true)}>
                        –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
                    </button>
                </div>
            </div>
            <FormUpdateRoute
                isOpen={isModalFormOpen}
                onClose={CloseModalForm}
                isActive={isAddMode}
                route={selectedRoute}
            />
            <ConfirmModal
                isOpen={isModalOpen}
                onClose={handleModalClose}
                message={modalMessage}
            />
        </div>
    );
};

export default RoutesManagement;